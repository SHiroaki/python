Python
・スクリプト言語です。遅いです。
・動的型付け　int a;とか宣言しなくてもいいです。何でもその場でぶっこめます。
・とっても抽象化されています。ライブラリがいっぱいあってそれ使うだけでたいていのことはできます。
・ブロックはインデントで区切る.基本的に半角スペース４個分。

def main():
	func1
	func2
		if a < b:
			return "hoge"
		else:
			retunr "unko"
	func3

main()


・得意
	文字列処理。HTMLの解析、生成。自然言語処理など
・不得意
	速さが求められること。馬鹿でかい計算とか。
	でもいまは高速化されたCythonとかNumpy, SciPyなどの科学技術ようパッケージも充実。


・組み込みデータ型
	・数値型　
		整数：１，−９０　サイズ制限なし
		浮動小数点：０．４２３２、−２．３２３
		複素数：3 + 2j
		ブール値：True(1) False(0) 

		演算子 + - * / //(除算の結果を丸め込み) **(累乗) %(剰余)
	・リスト
		[]
		リストの中には要素としてどんなオブジェクトをぶっこんでもおｋ
		いろんな型を混在させてもおｋ
		[1, 0.2, ["hiroaki","kodama"],(5,6)]

		・インデックス：先頭は０、末尾は−１

		・スライス：x[m:n]でスライスを取得。
			x = ["a","b","c","d"]
			y = x[0:3] とすると yには xの　0<= x <3の要素が入る
			つまりy = ["a","b","c"]
			この記法でリストに要素の追加、削除、置換、取得なんかができる
			
			スキップ
			x = ['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd']
			x[::2] = ['a', 'c', 'a', 'c', 'a', 'c']
			3個目にはスキップ数がかける.

			組み合わせ
			x = ['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd']
			x[1:6:2] = ['b', 'd', 'b']

			リストにはいくつかの組み込み関数が用意してある。
			len, max, min
			一部の演算子
			in +(連結) *(繰り返し x * 3とか)
			リストのメソッド
			len, append, pop, reverse, sot
			などが使える。

			スライスでリストの反転をするには？
			z = ['a', 'b', 'c', 'd', 1, 2, 3]
				      | z[::-1]
			[3, 2, 1, 'd', 'c', 'b', 'a']
	・タプル　()
		リストと似ているが変更不能
		(1,2,3,4,5)
		任意の型のオブジェクトを混在させて格納可能
		(1,)要素がひとつのタプルはカンマが必ず必要
		リスト同様の組み込み関数	
		len, max, min
		演算子
		in + *
		メソッド
		count(タプル中でのある要素の出現回数を数える) index
			
	・リストとタプルの変換
		x = [1,2,3]
		tuple(x)
		(1,2,3)

		x = (1,2,3)
		list(x)
		[1,2,3]
	・文字列
		"hello!" 'hello' """hello""", '''hello'''
		どれでもおｋ
		リストと同じようにスライスできるが、新しい文字列を返す
	・辞書(ハッシュ、連想配列)
		{}
		x = {key : value}
		keyは変更不能な型でなければならない。数値、文字列、タプルetc		
		valueは任意

		x = {1:"one", 2:"two"}
		x
		{1: 'one', 2: 'two'}
			
		メソッドいろいろ
		get, keys, items, values etc...
		>>> x.keys()
		dict_keys([1, 2])
		>>> x.items()
		dict_items([(1, 'one'), (2, 'two')])
		>>> x.values()
		dict_values(['one', 'two'])
		>>> x["3"] = "san"   #追加
		>>> x.items()
		dict_items([(1, 'one'), (2, 'two'), ('3', 'san')])
	・集合
		順序を持たないオブジェクトのコレクション
		対応する値を持たない辞書のkeyだと思ってもおｋ
		>>> y = set(x.keys())
		>>> y
		{1, 2, '3'}
		
		>>> 1 in y
		True
		>>> 4 in y
		False
		もちろん集合演算もできる

・制御構造
	・比較演算子
		<, <=, ==, >, >=, !=, is, is not, in, not in
	・論理演算子
		and, not, or
	上記２つの演算結果は必ずTrue or False
	＊False, [], "", 0, NoneはすべてFalseとして扱われる

	・if - elif - else
		elif, elseは必須ではない。
	x = 5
	if x < 5:
		y = -1
		z = 5
	elif x > 5:
		y = 1
		z = 11
	else:
		y = 0
		z = 10
	print(x,y,z)
	5 0 10

	・while
	・for







		
